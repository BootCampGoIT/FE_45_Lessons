{"version":3,"sources":["js/refs/refs.js","js/helpers/themeSwitcher.js","js/modal.js","js/header.js","index.js"],"names":["refs","header","document","querySelector","main","mainModal","mainModalContent","useThemeSwitcher","theme","JSON","parse","localStorage","getItem","persistTheme","setItem","stringify","style","backgroundColor","setTheme","isDarkTheme","createModal","content","options","classList","toggle","innerHTML","closeModal","e","target","currentTarget","removeEventListener","removeListeners","addEventListener","themeSwitcher","headerRefs","menuButton","settingsMarkup","close","closeButton","themeCheckBox","checked","call","bind","toggleModal"],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,MAAMA,EAAO,CAClBC,OAAQC,SAASC,cAAc,eAC/BC,KAAMF,SAASC,cAAc,gBAC7BE,UAAWH,SAASC,cAAc,cAClCG,iBAAkBJ,SAASC,cAAc,sBAJpC,QAAA,KAAA;;AC6DP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,EA7DA,IAAA,EAAA,QAAA,gBAEO,MAAMI,EAAmB,KACvB,CACLC,MAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,QACpDC,eACOJ,KAAKC,MAAMC,aAAaC,QAAQ,WACnCD,aAAaG,QAAQ,QAASL,KAAKM,UAAU,KAAKP,QAEjC,SAAf,KAAKA,MACFJ,EAAAA,KAAAA,KAAKY,MAAMC,gBAAkB,QACV,UAAf,KAAKT,QACTJ,EAAAA,KAAAA,KAAKY,MAAMC,gBAAkB,cAGtCC,WACqB,SAAf,KAAKV,OACFJ,EAAAA,KAAAA,KAAKY,MAAMC,gBAAkB,YAClCN,aAAaG,QAAQ,QAASL,KAAKM,UAAU,UACxCP,KAAAA,MAAQ,UAERJ,EAAAA,KAAAA,KAAKY,MAAMC,gBAAkB,QAClCN,aAAaG,QAAQ,QAASL,KAAKM,UAAU,SACxCP,KAAAA,MAAQ,SAGjBW,cACS,MAAe,SAAf,KAAKX,SAkClB,QAAA,iBAAA;;AC3DO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAFP,IAAA,EAAA,QAAA,eAEO,MAAMY,EAAc,CAACC,EAASC,KAC9BjB,EAAAA,KAAAA,UAAUkB,UAAUC,OAAO,UAC3BlB,EAAAA,KAAAA,iBAAiBmB,UAAYJ,EAE5BK,MAAAA,EAAaC,IACbA,EAAEC,SAAWD,EAAEE,gBACdxB,EAAAA,KAAAA,UAAUkB,UAAUC,OAAO,UAC3BnB,EAAAA,KAAAA,UAAUyB,oBAAoB,QAASJ,GAC5CK,MAQIA,EAAkBT,EALV,KACPjB,EAAAA,KAAAA,UAAUkB,UAAUC,OAAO,UAC3BnB,EAAAA,KAAAA,UAAUyB,oBAAoB,QAASJ,GAC5CK,MAIG1B,EAAAA,KAAAA,UAAU2B,iBAAiB,QAASN,IAlBpC,QAAA,YAAA;;ACiCP,aAnCA,IAAA,EAAA,QAAA,2BACA,EAAA,QAAA,WACA,EAAA,QAAA,eAEA,MAAMO,GAAgB,EAAtB,EAAA,oBAEMC,EAAa,CACjBC,WAAYnC,EAAKC,KAAAA,OAAOE,cAAc,sBAGlCiC,EAAkB,sJAMlBd,EAAUe,IACRC,MAAAA,EAAcpC,SAASC,cAAc,gBACrCoC,EAAgBrC,SAASC,cAAc,kBAC7CoC,EAAcC,QAAUP,EAAcd,YAAYsB,KAAKR,GACvDM,EAAcP,iBAAiB,SAAUC,EAAcf,SAASwB,KAAKT,IACrEK,EAAYN,iBAAiB,QAASK,GAK/BN,MAJiB,KACtBO,EAAYR,oBAAoB,QAASO,GACzCE,EAAcT,oBAAoB,SAAUG,EAAcf,SAASwB,KAAKT,MAKtEU,EAAchB,KACNS,EAAAA,EAAAA,aAAAA,EAAgBd,IAI9BW,EAAcpB,aAAa4B,KAAKR,GAChCC,EAAWC,WAAWH,iBAAiB,QAASW;;;;ACjChD,aAFA,QAAA,eACA,QAAA,aACA,QAAA","file":"src.ee46a1b9.js","sourceRoot":"../src","sourcesContent":["export const refs = {\n  header: document.querySelector('.mainHeader'),\n  main: document.querySelector('.mainContent'),\n  mainModal: document.querySelector('.mainModal'),\n  mainModalContent: document.querySelector('.mainModalContent'),\n};\n","import { refs } from '../refs/refs';\n\nexport const useThemeSwitcher = () => {\n  return {\n    theme: JSON.parse(localStorage.getItem('theme')) || 'light',\n    persistTheme() {\n      if (!JSON.parse(localStorage.getItem('theme'))) {\n        localStorage.setItem('theme', JSON.stringify(this.theme));\n      }\n      if (this.theme === 'dark') {\n        refs.main.style.backgroundColor = 'black';\n      } else if (this.theme === 'light') {\n        refs.main.style.backgroundColor = 'lightgray';\n      }\n    },\n    setTheme() {\n      if (this.theme === 'dark') {\n        refs.main.style.backgroundColor = 'lightgray';\n        localStorage.setItem('theme', JSON.stringify('light'));\n        this.theme = 'light';\n      } else {\n        refs.main.style.backgroundColor = 'black';\n        localStorage.setItem('theme', JSON.stringify('dark'));\n        this.theme = 'dark';\n      }\n    },\n    isDarkTheme() {\n      return this.theme === 'dark';\n    },\n  };\n};\n\n// =================== old ============================\n\n// export const persistTheme = () => {\n//   const currentTheme = JSON.parse(localStorage.getItem('theme'));\n//   if (currentTheme) {\n//     if (currentTheme === 'dark') {\n//       refs.main.style.backgroundColor = 'black';\n//     } else if (currentTheme === 'light') {\n//       refs.main.style.backgroundColor = 'lightgray';\n//     }\n//   } else {\n//     localStorage.setItem('theme', JSON.stringify('light'));\n//   }\n// };\n\n// export const setTheme = () => {\n//   const currentTheme = JSON.parse(localStorage.getItem('theme'));\n//   if (currentTheme === 'dark') {\n//     refs.main.style.backgroundColor = 'lightgray';\n//     localStorage.setItem('theme', JSON.stringify('light'));\n//   } else {\n//     refs.main.style.backgroundColor = 'black';\n//     localStorage.setItem('theme', JSON.stringify('dark'));\n//   }\n// };\n\n// export const isDarkTheme = () => {\n//   const currentTheme = JSON.parse(localStorage.getItem('theme'));\n//   return currentTheme === 'dark';\n// };\n","import { refs } from './refs/refs';\n\nexport const createModal = (content, options) => {\n  refs.mainModal.classList.toggle('closed');\n  refs.mainModalContent.innerHTML = content;\n\n  const closeModal = e => {\n    if (e.target !== e.currentTarget) return;\n    refs.mainModal.classList.toggle('closed');\n    refs.mainModal.removeEventListener('click', closeModal);\n    removeListeners();\n  };\n\n  const close = () => {\n    refs.mainModal.classList.toggle('closed');\n    refs.mainModal.removeEventListener('click', closeModal);\n    removeListeners();\n  };\n  const removeListeners = options(close);\n\n  refs.mainModal.addEventListener('click', closeModal);\n};\n","import { useThemeSwitcher } from './helpers/themeSwitcher';\nimport { createModal } from './modal';\nimport { refs } from './refs/refs';\n\nconst themeSwitcher = useThemeSwitcher();\n\nconst headerRefs = {\n  menuButton: refs.header.querySelector('.mainHeaderButton'),\n};\n\nconst settingsMarkup = `\n<h2>Settings</h2>\n<label>Dark <input type=\"checkbox\" class=\"themeCheckBox\"/></label>\n<button type=\"button\" class=\"closeButton\">Close</button>\n`;\n\nconst options = close => {\n  const closeButton = document.querySelector('.closeButton');\n  const themeCheckBox = document.querySelector('.themeCheckBox');\n  themeCheckBox.checked = themeSwitcher.isDarkTheme.call(themeSwitcher);\n  themeCheckBox.addEventListener('change', themeSwitcher.setTheme.bind(themeSwitcher));\n  closeButton.addEventListener('click', close);\n  const removeListeners = () => {\n    closeButton.removeEventListener('click', close);\n    themeCheckBox.removeEventListener('change', themeSwitcher.setTheme.bind(themeSwitcher));\n  };\n  return removeListeners;\n};\n\nconst toggleModal = e => {\n  createModal(settingsMarkup, options);\n};\n\n// persistTheme();\nthemeSwitcher.persistTheme.call(themeSwitcher);\nheaderRefs.menuButton.addEventListener('click', toggleModal);\n","import './js/header';\nimport './js/main';\nimport './sass/main.scss';\n"]}